---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/sections/Hero.astro';
import Experience from '../components/sections/Experience.astro';
import Journey from '../components/sections/Journey.astro';
import Works from '../components/sections/Works.astro';
---

<Layout title="Habdil - Personal Portfolio">
  <main class="relative">
    <!-- Priority Sections -->
    <div class="priority-content">
      <Hero />
      <Experience />
      <Journey />
    </div>
    
    <!-- Deferred Loading Section -->
    <div 
      class="deferred-content" 
      data-loading="true"
      aria-busy="true"
    >
      <Works />
    </div>
  </main>
</Layout>

<script>
// Loading state management
let isLoading = true;

// Function to initialize sections
function initializeSections() {
  const deferredContent = document.querySelector('.deferred-content');
  if (!deferredContent) return;

  // Create and show loading indicator if needed
  const loadingIndicator = document.createElement('div');
  loadingIndicator.className = 'loading-indicator';
  deferredContent.appendChild(loadingIndicator);

  // Use Intersection Observer for lazy loading
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        loadDeferredContent();
        observer.disconnect();
      }
    });
  }, {
    rootMargin: '50px', // Start loading slightly before section is visible
    threshold: 0.1
  });

  observer.observe(deferredContent);
}

// Function to load deferred content
async function loadDeferredContent() {
  const deferredContent = document.querySelector('.deferred-content');
  if (!deferredContent || !isLoading) return;

  try {
    // Remove loading state
    deferredContent.removeAttribute('data-loading');
    deferredContent.setAttribute('aria-busy', 'false');
    isLoading = false;

    // Remove loading indicator if exists
    const loadingIndicator = deferredContent.querySelector('.loading-indicator');
    if (loadingIndicator) {
      loadingIndicator.remove();
    }

    // Initialize any scripts or functionality needed for Works section
    initializeWorksSection();
  } catch (error) {
    console.error('Error loading deferred content:', error);
    // Handle error state if needed
  }
}

// Initialize Works section specific functionality
function initializeWorksSection() {
  // Add any Works-specific initialization here
  // For example, image lazy loading, filters, etc.
}

// Handle initial page load
document.addEventListener('DOMContentLoaded', initializeSections);

// Handle Astro view transitions
document.addEventListener('astro:page-load', () => {
  isLoading = true;
  initializeSections();
});

document.addEventListener('astro:after-swap', () => {
  isLoading = true;
  initializeSections();
});
</script>

<style>
/* Loading indicator styles */
.deferred-content[data-loading="true"] {
  min-height: 200px;
  position: relative;
}

.loading-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40px;
  height: 40px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  display: none;
}

.deferred-content[data-loading="true"] .loading-indicator {
  display: block;
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Smooth content transitions */
.priority-content,
.deferred-content {
  transition: opacity 0.3s ease-in-out;
}

.deferred-content[data-loading="true"] {
  opacity: 0.6;
}
</style>