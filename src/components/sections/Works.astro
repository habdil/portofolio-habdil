---
const works = [
  {
    title: "Website App",
    subtitle: "KarierKu: Build Your Dream Career With Us",
    image: "/assets/images/banner/banner-5.png",
    category: "Website",
    year: "2024",
    href: "https://kaktus-karierku-habdiliqrawardana-gmailcoms-projects.vercel.app/"
  },
  {
    title: "Machine Learning",
    subtitle: "StrokeGuard: Intelligent Stroke Risk Prediction System",
    image: "/assets/images/banner/banner-6.png",
    bgColor: "bg-white",
    href: "https://stroke-guard-smoky.vercel.app/"
  },
  {
    title: "Mobile App Design",
    subtitle: "EduNovel: Read a Novel, you can donate!",
    image: "/assets/images/banner/banner-1.png",
    bgColor: "bg-white",
    href: "https://www.figma.com/proto/PpjczXw4I7NzNKocAA1Oaf/EduNovel?page-id=0%3A1&type=design&node-id=1-154&viewport=-363%2C-4147%2C0.47&t=njsbVZbORD7Oi5kE-1&scaling=scale-down&starting-point-node-id=401%3A162&show-proto-sidebar=1"
  },
  {
    title: "Desktop App",
    subtitle: "RakyatAdu: Care and Swift Service",
    image: "/assets/images/banner/banner-2.png",
    bgColor: "bg-white",
    href: "https://github.com/habdil/rakyatAdu-bitminds-sistem-pelaporan-masyarakat/tree/master"
  },
  {
    title: "Machine Learning",
    subtitle: "CrimeInsight Prediction",
    image: "/assets/images/banner/banner-3.png",
    bgColor: "bg-white",
    href: "https://github.com/habdil/crimeInsight-prediction"
  },
  {
    title: "Business Idea Comeptition",
    subtitle: "SkillWave: Building Indonesia's Digital Future",
    image: "/assets/images/banner/banner-7.png",
    bgColor: "bg-white",
    href: "https://drive.google.com/file/d/1PzVb3sw8RYkZZRig5Y_UmkpH1BeODDHa/view"
  },
  {
    title: "Research Project",
    subtitle: "Air Quality Innovation",
    image: "/assets/images/banner/banner-4.png",
    bgColor: "bg-white",
    href: "https://bit.ly/PaperINFORVATION"
  },
];
---

<section class="py-20 bg-gray-50" id="works">
  <div class="container mx-auto px-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-16">
      <div>
        <h2 class="text-3xl md:text-4xl font-bold text-blue-dark mb-3">
          My Latest Works
        </h2>
        <p class="text-blue-medium/80 text-lg">
          Perfect Solution with Digital Experience
        </p>
      </div>
      
      <a 
        href="/projects" 
        class="text-salmon hover:text-salmon/80 transition-colors font-medium hidden md:flex items-center gap-2 group"
      >
        Explore More Works
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="w-5 h-5 transform group-hover:translate-x-1 transition-transform" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
        </svg>
      </a>
    </div>

    <!-- Horizontal Scrollable Container -->
    <div class="relative">
      <!-- Scroll Wrapper -->
      <div 
        class="overflow-x-auto pb-8 no-scrollbar scroll-container"
        id="scrollContainer"
      >
        <!-- Works Row -->
        <div class="flex gap-8" style="min-width: min-content">
          {works.map((work, index) => (
            <div 
              class="group relative bg-white rounded-3xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300"
              data-aos="fade-up"
              data-aos-delay={index * 100}
              style="min-width: 400px; max-width: 400px;"
            >
              <!-- Card Content -->
              <div class="p-8">
                <!-- Title Area -->
                <div class="mb-6">
                  <h3 class="text-xl font-bold text-blue-dark mb-2">
                    {work.title}
                  </h3>
                  <p class="text-blue-medium/80">
                    {work.subtitle}
                  </p>
                </div>
                
                <!-- Image Container -->
                <div class="aspect-square w-full relative rounded-2xl overflow-hidden">
                  <img 
                    src={work.image}
                    alt={work.title}
                    class="w-full h-full object-cover transform transition-all duration-500 group-hover:scale-105"
                    width="4320"
                    height="4320"
                  />
                </div>

                <!-- Hover Overlay -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end">
                  <div class="p-8 w-full">
                    <div class="backdrop-blur-sm bg-white/30 rounded-2xl p-4 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                      <a 
                        href={work.href}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="block w-full px-6 py-3 bg-white/90 rounded-xl text-blue-dark font-medium hover:bg-white transition-colors text-center"
                      >
                        View Details
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Scroll Indicators -->
      <div class="absolute -bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2" id="indicators">
        {works.map((_, index) => (
          <button
            class={`scroll-indicator w-2 h-2 rounded-full transition-all duration-300 ${
              index === 0 ? 'bg-salmon w-6' : 'bg-gray-300 hover:bg-gray-400'
            }`}
            data-index={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>

    <!-- Mobile Explore More Button -->
    <div class="mt-12 text-center md:hidden">
      <a 
        href="/projects" 
        class="inline-flex items-center gap-2 text-salmon hover:text-salmon/80 transition-colors font-medium"
      >
        Explore More Works
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="w-5 h-5" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  /* Hide scrollbar but keep functionality */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  /* Optimize image loading */
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 1 / 1;
  }

  .scroll-container {
    cursor: grab;
  }

  .scroll-container:active {
    cursor: grabbing;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContainer = document.getElementById('scrollContainer');
    const indicators = document.querySelectorAll('.scroll-indicator');
    const works = document.querySelectorAll('.group.relative'); // Get all work items
    let isDragging = false;
    let startX;
    let scrollLeft;

    // Calculate viewport width and number of visible items
    const calculateVisibleItems = () => {
      const containerWidth = scrollContainer.clientWidth;
      const itemWidth = 432; // 400px + 32px gap
      return Math.floor(containerWidth / itemWidth);
    };

    // Update indicators based on scroll position
    const updateIndicators = () => {
      const scrollPosition = scrollContainer.scrollLeft;
      const itemWidth = 432; // 400px + 32px gap
      const maxScroll = scrollContainer.scrollWidth - scrollContainer.clientWidth;
      const progress = scrollPosition / maxScroll;
      const numItems = works.length;
      
      // Calculate current index based on scroll progress
      const currentIndex = Math.min(
        Math.floor(progress * numItems),
        numItems - 1
      );
      
      indicators.forEach((indicator, index) => {
        if (index === currentIndex) {
          indicator.classList.add('w-6', 'bg-salmon');
          indicator.classList.remove('bg-gray-300');
        } else {
          indicator.classList.remove('w-6', 'bg-salmon');
          indicator.classList.add('bg-gray-300');
        }
      });
    };

    // Handle indicator clicks
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        const numItems = works.length;
        const containerWidth = scrollContainer.clientWidth;
        const scrollWidth = scrollContainer.scrollWidth;
        const maxScroll = scrollWidth - containerWidth;
        
        // Calculate target scroll position
        const targetScroll = (index / (numItems - 1)) * maxScroll;
        
        scrollContainer.scrollTo({
          left: targetScroll,
          behavior: 'smooth'
        });
      });
    });

    // Mouse events for drag scrolling
    scrollContainer.addEventListener('mousedown', (e) => {
      isDragging = true;
      scrollContainer.classList.add('cursor-grabbing');
      startX = e.pageX - scrollContainer.offsetLeft;
      scrollLeft = scrollContainer.scrollLeft;
    });

    scrollContainer.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
      const x = e.pageX - scrollContainer.offsetLeft;
      const walk = (x - startX) * 2;
      scrollContainer.scrollLeft = scrollLeft - walk;
    });

    const stopDragging = () => {
      if (isDragging) {
        isDragging = false;
        scrollContainer.classList.remove('cursor-grabbing');
        // Trigger an additional update for smoother indicator transition
        setTimeout(updateIndicators, 100);
      }
    };

    scrollContainer.addEventListener('mouseup', stopDragging);
    scrollContainer.addEventListener('mouseleave', stopDragging);

    // Update indicators on scroll with throttling
    let scrollTimeout;
    scrollContainer.addEventListener('scroll', () => {
      if (scrollTimeout) {
        window.cancelAnimationFrame(scrollTimeout);
      }
      scrollTimeout = window.requestAnimationFrame(updateIndicators);
    });
    
    // Touch events for mobile
    scrollContainer.addEventListener('touchend', () => {
      setTimeout(updateIndicators, 100);
    });

    // Initial update
    updateIndicators();

    // Update on resize
    window.addEventListener('resize', () => {
      setTimeout(updateIndicators, 100);
    });
  });
</script>