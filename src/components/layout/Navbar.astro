---
const logo = '/assets/icons/logo.png';

const navLinks = [
  { text: "Home", href: "/" },
  { text: "Project", href: "/projects" },
  { text: "Experience", href: "/experiences" },
  { text: "About", href: "/about" }
];

const currentPath = Astro.url.pathname;
---

<header class="fixed top-0 left-0 w-full bg-white shadow-sm z-50 transition-transform duration-300">
  <nav class="container mx-auto px-6">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2 z-50">
        <img 
          src={logo}
          alt="FutureCrafted Logo"
          class="h-8 w-auto" 
        />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navLinks.map(link => (
          <a 
            href={link.href}
            class={`relative py-2 text-sm font-medium transition-colors duration-300
                   after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-0
                   after:bg-gradient-to-r after:from-teal after:to-blue-dark
                   after:transition-all after:duration-300 hover:after:w-full
                   ${currentPath === link.href ? 
                     'text-blue-dark after:w-full' : 
                     'text-blue-medium hover:text-blue-dark'
                   }`}
          >
            {link.text}
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button -->
      <button 
        id="menuButton"
        class="md:hidden relative z-50 w-8 h-8 flex items-center justify-center"
        aria-label="Toggle Menu"
        aria-expanded="false"
      >
        <div class="relative w-6 h-6">
          <span class="absolute top-0 left-0 w-6 h-0.5 bg-blue-dark transition-transform duration-300"></span>
          <span class="absolute top-[10px] left-0 w-6 h-0.5 bg-blue-dark transition-opacity duration-300"></span>
          <span class="absolute top-[20px] left-0 w-6 h-0.5 bg-blue-dark transition-transform duration-300"></span>
        </div>
      </button>
    </div>

    <!-- Mobile Navigation Menu -->
    <div 
      id="mobileMenu"
      class="fixed inset-0 bg-white/95 backdrop-blur-sm transform translate-x-full transition-transform duration-300 ease-in-out md:hidden z-40"
      aria-hidden="true"
    >
      <div class="flex flex-col h-full justify-center items-center p-6">
        <div class="flex flex-col space-y-6 text-center">
          {navLinks.map(link => (
            <a 
              href={link.href}
              data-nav-link
              class={`text-xl font-medium py-3 px-6 rounded-lg transition-all duration-300
                     transform hover:scale-105
                     ${currentPath === link.href ? 
                       'bg-gradient-to-r from-teal/10 to-blue-dark/10 text-blue-dark' : 
                       'text-blue-medium hover:bg-gray-50'
                     }`}
            >
              {link.text}
            </a>
          ))}
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
// State management for mobile menu
let isMenuOpen = false;

// Initialize mobile menu functionality
function initializeMobileMenu() {
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  
  if (!menuButton || !mobileMenu) return;
  
  // Reset state
  isMenuOpen = false;
  menuButton.classList.remove('menu-open');
  mobileMenu.classList.remove('mobile-menu-show');
  document.body.classList.remove('menu-open-body');
  
  function toggleMenu() {
    if (!menuButton || !mobileMenu) return;
    
    isMenuOpen = !isMenuOpen;
    menuButton.classList.toggle('menu-open');
    mobileMenu.classList.toggle('mobile-menu-show');
    document.body.classList.toggle('menu-open-body');
    menuButton.setAttribute('aria-expanded', String(isMenuOpen));
    mobileMenu.setAttribute('aria-hidden', String(!isMenuOpen));
  }

  // Menu button click handler
  menuButton.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleMenu();
  });

  // Close menu on navigation link click
  const navLinks = mobileMenu.querySelectorAll('[data-nav-link]');
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (isMenuOpen) toggleMenu();
    });
  });

  // Close menu on outside click
  document.addEventListener('click', (e) => {
    if (isMenuOpen && !mobileMenu.contains(e.target as Node) && e.target !== menuButton) {
      toggleMenu();
    }
  });

  // Close menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isMenuOpen) {
      toggleMenu();
    }
  });

  // Handle resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && isMenuOpen) {
      toggleMenu();
    }
  });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', initializeMobileMenu);

// Re-initialize after Astro view transitions
document.addEventListener('astro:page-load', initializeMobileMenu);
document.addEventListener('astro:after-swap', initializeMobileMenu);

// Handle cleanup between page transitions
document.addEventListener('astro:before-swap', () => {
  document.body.classList.remove('menu-open-body');
});
</script>

<style>
.menu-open span:first-child {
  transform: translateY(10px) rotate(45deg);
}

.menu-open span:nth-child(2) {
  opacity: 0;
}

.menu-open span:last-child {
  transform: translateY(-10px) rotate(-45deg);
}

.mobile-menu-show {
  transform: translateX(0) !important;
}

.menu-open-body {
  overflow: hidden;
  touch-action: none;
}

@media (min-width: 768px) {
  .menu-open-body {
    overflow: auto;
    touch-action: auto;
  }
}
</style>