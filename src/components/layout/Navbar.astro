---
const logo = '/assets/icons/logo.png';

const navLinks = [
  { text: "Home", href: "/" },
  { text: "Project", href: "/projects" },
  { text: "Experience", href: "/experiences" },
  { text: "About", href: "/about" }
];

const currentPath = Astro.url.pathname;
---

<header class="fixed top-0 left-0 w-full bg-white shadow-sm z-50 transition-transform duration-300">
  <nav class="container mx-auto px-6">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2 z-50">
        <img 
          src={logo}
          alt="FutureCrafted Logo"
          class="h-8 w-auto" 
        />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navLinks.map(link => (
          <a 
            href={link.href}
            class={`relative py-2 text-sm font-medium transition-colors duration-300
                   after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-0
                   after:bg-gradient-to-r after:from-teal after:to-blue-dark
                   after:transition-all after:duration-300 hover:after:w-full
                   ${currentPath === link.href ? 
                     'text-blue-dark after:w-full' : 
                     'text-blue-medium hover:text-blue-dark'
                   }`}
          >
            {link.text}
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button -->
      <button 
        id="menuButton"
        class="md:hidden relative z-50 w-8 h-8 flex items-center justify-center"
        aria-label="Toggle Menu"
        aria-expanded="false"
      >
        <div class="relative w-6 h-6">
          <span class="absolute top-0 left-0 w-6 h-0.5 bg-blue-dark transform transition-all duration-300 rotate-0"></span>
          <span class="absolute top-[10px] left-0 w-6 h-0.5 bg-blue-dark transform transition-all duration-300"></span>
          <span class="absolute top-[20px] left-0 w-6 h-0.5 bg-blue-dark transform transition-all duration-300 rotate-0"></span>
        </div>
      </button>
    </div>

    <!-- Mobile Navigation Menu -->
    <div 
      id="mobileMenu"
      class="fixed inset-0 bg-white/95 backdrop-blur-sm transform translate-x-full transition-transform duration-500 ease-in-out md:hidden z-40 pointer-events-none"
      aria-hidden="true"
    >
      <div class="flex flex-col h-full justify-center items-center p-6 pointer-events-auto">
        <div class="flex flex-col space-y-6 text-center">
          {navLinks.map(link => (
            <a 
              href={link.href}
              data-nav-link
              class={`text-xl font-medium py-3 px-6 rounded-lg transition-all duration-300
                     transform hover:scale-105
                     ${currentPath === link.href ? 
                       'bg-gradient-to-r from-teal/10 to-blue-dark/10 text-blue-dark' : 
                       'text-blue-medium hover:bg-gray-50'
                     }`}
            >
              {link.text}
            </a>
          ))}
        </div>
      </div>
    </div>
  </nav>
</header>

<style>
.menu-open span:first-child {
  top: 10px !important;
  transform: rotate(45deg) !important;
}

.menu-open span:nth-child(2) {
  opacity: 0 !important;
  transform: translateX(100%) !important;
}

.menu-open span:last-child {
  top: 10px !important;
  transform: rotate(-45deg) !important;
}

.mobile-menu-show {
  transform: translateX(0) !important;
  pointer-events: auto !important;
}

/* Prevent scrolling when menu is open */
.menu-open-body {
  overflow: hidden !important;
}
</style>

<script>
function setupMobileMenu() {
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const navLinks = document.querySelectorAll('[data-nav-link]');
  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    menuButton?.classList.toggle('menu-open');
    mobileMenu?.classList.toggle('mobile-menu-show');
    document.body.classList.toggle('menu-open-body');
    menuButton?.setAttribute('aria-expanded', isMenuOpen.toString());
    mobileMenu?.setAttribute('aria-hidden', (!isMenuOpen).toString());
  }

  // Remove any existing event listeners
  const newMenuButton = menuButton?.cloneNode(true);
  if (menuButton && newMenuButton) {
    menuButton.parentNode?.replaceChild(newMenuButton, menuButton);
  }

  // Add new event listeners
  newMenuButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleMenu();
  });

  // Close menu when pressing Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isMenuOpen) {
      toggleMenu();
    }
  });

  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (isMenuOpen && !mobileMenu?.contains(target) && target !== newMenuButton) {
      toggleMenu();
    }
  });

  // Handle nav links
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (isMenuOpen) {
        toggleMenu();
      }
    });
  });

  // Handle resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && isMenuOpen) {
      toggleMenu();
    }
  });

  // Handle scroll
  let prevScroll = window.pageYOffset;
  const header = document.querySelector('header');
  
  window.addEventListener('scroll', () => {
    if (isMenuOpen) return;

    const currentScroll = window.pageYOffset;
    if (currentScroll > prevScroll && currentScroll > 100) {
      header?.classList.add('-translate-y-full');
    } else {
      header?.classList.remove('-translate-y-full');
    }
    prevScroll = currentScroll;
  });
}

// Setup on initial load
setupMobileMenu();

// Re-setup after each navigation
document.addEventListener('astro:after-swap', setupMobileMenu);
</script>